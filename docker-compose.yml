version: '2'
services:
    base:
        image: docker.local/base:latest
        build: 
            context: ./recipes/base
            dockerfile: Dockerfile
        environment:
            SHELL: bash
            TERM: xterm-256color
            SSH_AUTH_SOCK: ${SSH_AUTH_SOCK}
        volumes:
            - ./recipes/base/bashrc.sh:/root/.bashrc
            - ./recipes/base/insecure_key:/root/.ssh/insecure_key
            - ./recipes/base/insecure_key.pub:/root/.ssh/insecure_key.pub
            - ${SSH_AUTH_SOCK}:${SSH_AUTH_SOCK}
    shell:
        extends:
            service: base
        command: bash
    sshd:
        extends:
            service: base
        image: docker.local/sshd:latest
        container_name: sshd
        build: 
            context: ./recipes/sshd
            dockerfile: Dockerfile
        depends_on:
            - base
        command: ["/usr/sbin/sshd", "-D", "-d"]
    ssh:
        extends:
            service: base
        image: docker.local/ssh:latest
        container_name: ssh
        build: 
            context: ./recipes/ssh
            dockerfile: Dockerfile
        depends_on:
            - sshd
        entrypoint: ssh
        command: -Aq -i /root/.ssh/insecure_key -o "StrictHostKeyChecking no" root@sshd -p 22
    aws-common:
        extends:
            service: base
        volumes:
            - .data/aws:/root/.aws
            - ./recipes/aws/entrypoint.sh:/entrypoint.sh
        environment:
            AWS_CONFIG_FILE: /root/.aws/config
            AWS_DEFAULT_PROFILE: default
            AWS_REGION: us-west-2
            DEBUG: 1
        entrypoint: /entrypoint.sh
    aws:
        extends:
            service: aws-common
        image: docker.local/aws:latest
        container_name: aws
        build: 
            context: ./recipes/aws
            dockerfile: Dockerfile
        depends_on:
            - base
        command: config
    kinesis:
        extends:
            service: aws-common
        image: docker.local/kinesis:latest
        container_name: kinesis
        build:
            context: ./recipes/kinesis
            dockerfile: Dockerfile
        depends_on:
            - aws
        working_dir: /go/src/aws-kinesis
        volumes:
            - ./recipes/kinesis/src:/go/src/aws-kinesis
        environment:
            DEFAULT_COMMAND: aws-kinesis
        command: help
    rancher:
        image: rancher/server
        container_name: rancher
        restart: always
        ports:
            - "8080:8080"
    sysdig:
        image: sysdig/sysdig
        container_name: sysdig
        volumes: 
            - /var/run/docker.sock:/var/run/docker.sock  
            - /dev:/host/dev 
            - /proc:/host/proc:ro 
            - /boot:/host/boot:ro 
            - /lib/modules:/host/lib/modules:ro 
            - /usr:/host/usr:ro 
        privileged: true 
        command: csysdig
    cadvisor:
        image: google/cadvisor:latest
        container_name: cadvisor
        volumes:
            - /:/rootfs:ro 
            - /var/run:/var/run:rw 
            - /sys:/sys:ro 
            - /var/lib/docker/:/var/lib/docker:ro
        ports:
            - "8081:8080"
    che:
        image: codenvy/che
        container_name: che
        volumes:
           - /var/run/docker.sock:/var/run/docker.sock 
           - ./recipes/che/che.properties:/home/user/.che/che.properties
           - .data/che/lib:/home/user/che/lib-copy 
           - .data/che/workspaces:/home/user/che/workspaces 
           - .data/che/tomcat/temp/local-storage:/home/user/che/tomcat/temp/local-storage
        ports:
            - "8082:8080"
        environment:
            - CHE_DOCKER_MACHINE_HOST=${DOCKER_VM_IP}
            - CHE_EXPORTED_PORT=8082
        command: >
            bash -c "
            sudo rm -rf /home/user/che/lib-copy/* &&
            sudo rm -rf /home/user/che/tomcat/temp/local-storage/* &&
            mkdir -p /home/user/che/lib-copy/ &&
            sudo chown -R user:user /home/user/che &&
            cp -rf /home/user/che/lib/* /home/user/che/lib-copy &&
            sudo chown -R user:staff /var/run/docker.sock && 
            /home/user/che/bin/che.sh run -d
            "
